#include <glib.h>
#include <glib-object.h>

#ifndef BD_FS_API
#define BD_FS_API

#define BD_FS_ERROR bd_fs_error_quark ()
typedef enum {
    BD_FS_ERROR_INVAL,
    BD_FS_ERROR_FAIL,
} BDFsError;

/**
 * bd_fs_wipe:
 * @device: the device to wipe signatures from
 * @all: whether to wipe all (%TRUE) signatures or just the first (%FALSE) one
 * @error: (out): place to store error (if any)
 *
 * Returns: whether signagures were successfully wiped on @device or not
 */
gboolean bd_fs_wipe (gchar *device, gboolean all, GError **error);


/**
 * bd_fs_ext4_mkfs:
 * @device: the device to create a new ext4 fs on
 * @error: (out): place to store error (if any)
 *
 * Returns: whether a new ext4 fs was successfully created on @device or not
 */
gboolean bd_fs_ext4_mkfs (gchar *device, GError **error);

/**
 * bd_fs_ext4_wipe:
 * @device: the device to wipe an ext4 signature from
 * @error: (out): place to store error (if any)
 *
 * Returns: whether an ext4 signature was successfully wiped from the @device or
 *          not
 */
gboolean bd_fs_ext4_wipe (gchar *device, GError **error);

/**
 * bd_fs_ext4_check:
 * @device: the device the file system on which to check
 * @error: (out): place to store error (if any)
 *
 * Returns: whether an ext4 file system on the @device is clean or not
 */
gboolean bd_fs_ext4_check (gchar *device, GError **error);

/**
 * bd_fs_ext4_repair:
 * @device: the device the file system on which to repair
 * @unsafe: whether to do unsafe operations too
 * @error: (out): place to store error (if any)
 *
 * Returns: whether an ext4 file system on the @device was successfully repaired
 *          (if needed) or not (error is set in that case)
 */
gboolean bd_fs_ext4_repair (gchar *device, gboolean unsafe, GError **error);

#endif  /* BD_FS_API */
